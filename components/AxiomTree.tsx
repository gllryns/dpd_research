"use client";
type Rel={type?:{conceptId?:string;fsn?:{term?:string};pt?:{term?:string}};target?:{conceptId?:string;fsn?:{term?:string};pt?:{term?:string}};groupId?:number};
const Chip=({t}:{t:string})=>(<span className='inline-block px-2 py-[2px] rounded bg-blue-50 border border-blue-200 text-blue-800 text-xs'>{t}</span>);
const Head=({t}:{t:string})=>(<span className='inline-block px-2 py-[2px] rounded bg-amber-50 border border-amber-200 text-amber-800 text-xs'>{t}</span>);
export default function AxiomTree({title,rels}:{title:string;rels:Rel[]}){ const groups:Record<string,Rel[]>={}; for(const r of rels||[]){ const g=String(r.groupId??0); (groups[g]??=[]).push(r);} return(<div className='border rounded-lg p-3 bg-white'><div className='inline-block px-2 py-1 rounded bg-indigo-100 text-indigo-900 text-sm font-medium mb-2'>{title}</div>{Object.keys(groups).length===0&&<div className='text-sm text-gray-500'>No relationships</div>}{Object.entries(groups).map(([gid,arr])=>{ const by:Record<string,Rel[]>={}; for(const r of arr){ const k=r.type?.conceptId||r.type?.pt?.term||'attr'; (by[k]??=[]).push(r);} return(<div key={gid} className='mb-3'>{gid!=='0'&&<div className='text-xs mb-2 px-2 py-[2px] rounded border bg-purple-50 text-purple-800 inline-block'>Role group {gid}</div>}<ul className='ml-3 space-y-2'>{Object.values(by).map((vals,i)=>{ const h=vals[0]; const t=h.type?.pt?.term||h.type?.fsn?.term||h.type?.conceptId||'Attribute'; return(<li key={i}><div className='flex items-center gap-2'><Head t={t}/><div className='h-[1px] bg-gray-300 flex-1'/></div><ul className='ml-6 mt-2 space-y-1'>{vals.map((x,j)=>{ const v=x.target?.pt?.term||x.target?.fsn?.term||x.target?.conceptId||''; const id=x.target?.conceptId; return(<li key={j} className='flex items-center gap-2'><span className='w-2 h-2 rounded-full bg-gray-400'/><Chip t={`${v}${id?` (${id})`:''}`}/></li>); })}</ul></li>); })}</ul></div>); })}</div>); }
