"use client";
import { useEffect, useState } from 'react'; import { createColumnHelper, flexRender, getCoreRowModel, getSortedRowModel, SortingState, useReactTable } from '@tanstack/react-table'; import ConceptPicker from '@/components/ConceptPicker'; import ConceptModal from '@/components/ConceptModal';
 type Ingredient={_id?:string;code:string;name:string;status:'active'|'inactive'|'deprecated'}; type Mapping={_id?:string;dpdIngredientCode:string;snomedId?:string;snomedTerm?:string;correlation?:'exact'|'narrow'|'broad'|'partial';status?:'draft'|'proposed'|'approved'|'rejected';notes?:string;updatedAt?:string}; type Paged<T>={items:T[];total:number;page:number;pageSize:number};
export default function Substances(){ const [q,setQ]=useState(''); const [status,setStatus]=useState(''); const [page,setPage]=useState(1); const [pageSize,setPageSize]=useState(20); const [sort,setSort]=useState<SortingState>([{id:'code',desc:false}]); const [data,setData]=useState<Paged<Ingredient>>({items:[],total:0,page:1,pageSize:20}); const [selected,setSelected]=useState<Ingredient|null>(null); const [mappings,setMappings]=useState<Mapping[]>([]); const [modalOpen,setModalOpen]=useState(false); const [modalConceptId,setModalConceptId]=useState<string|undefined>(undefined);
 async function fetchData(){ const p=new URLSearchParams(); if(q) p.set('q',q); if(status) p.set('status',status); p.set('page',String(page)); p.set('pageSize',String(pageSize)); const s=sort[0]; if(s){p.set('sortBy',s.id); p.set('sortDir',s.desc?'desc':'asc');} const r=await fetch('/api/ingredients?'+p.toString(),{cache:'no-store'}); setData(await r.json()); }
 useEffect(()=>{ fetchData(); },[q,status,page,pageSize,sort]); const onSelect=async(ing:Ingredient)=>{ setSelected(ing); const r=await fetch('/api/mappings/'+encodeURIComponent(ing.code)); const j=await r.json(); setMappings(j.items||[]); };
 const addMapping=async()=>{ if(!selected) return; const r=await fetch('/api/mappings/'+encodeURIComponent(selected.code),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({status:'draft',correlation:'exact'})}); if(r.ok){ setMappings((ms)=>[(await r.json()),...ms]); } };
 const saveMapping=async(m:Mapping)=>{ if(!selected||!m._id) return; const r=await fetch(`/api/mappings/${encodeURIComponent(selected.code)}/${m._id}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(m)}); if(r.ok){ const u=await r.json(); setMappings(ms=>ms.map(x=>x._id===u._id?u:x)); } };
 const deleteMapping=async(m:Mapping)=>{ if(!selected||!m._id) return; if(!confirm('Delete mapping?')) return; const r=await fetch(`/api/mappings/${encodeURIComponent(selected.code)}/${m._id}`,{method:'DELETE'}); if(r.ok) setMappings(ms=>ms.filter(x=>x._id!==m._id)); };
 const createIngredient=async()=>{ const code=prompt('New code:'); if(!code) return; const name=prompt('Name:'); if(!name) return; const statusVal=(prompt('Status [active|inactive|deprecated]','active')||'active') as any; const r=await fetch('/api/ingredients',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({code,name,status:statusVal})}); if(r.ok) fetchData(); };
 const ch=createColumnHelper<Ingredient>(); const columns=[ ch.accessor('code',{header:()=><span>Code</span>,cell:info=><span className='font-mono'>{info.getValue()}</span>}), ch.accessor('name',{header:()=><span>Name</span>}), ch.accessor('status',{header:()=><span>Status</span>}), ch.display({id:'actions',header:()=><span>Actions</span>,cell:info=>(<button className='text-xs border rounded px-2 py-1' onClick={()=>onSelect(info.row.original)}>Open</button>)}) ]; const table=useReactTable({data:data.items,columns,state:{sorting:sort},onSortingChange:setSort,getCoreRowModel:getCoreRowModel(),getSortedRowModel:getSortedRowModel(),manualSorting:true});
 return(<div className='p-4 space-y-4'><div className='flex items-end gap-3 flex-wrap'><div><label className='block text-sm'>Search</label><input className='border rounded px-3 py-2' value={q} onChange={e=>setQ(e.target.value)} placeholder='code or name'/></div><div><label className='block text-sm'>Status</label><select className='border rounded px-3 py-2' value={status} onChange={e=>setStatus(e.target.value)}><option value=''>Any</option><option>active</option><option>inactive</option><option>deprecated</option></select></div><div className='ml-auto flex gap-2'><button className='border rounded px-3 py-2' onClick={createIngredient}>New Substance</button><a className='border rounded px-3 py-2' href='/browser'>Tester</a></div></div><div className='border rounded overflow-hidden'><table className='w-full text-sm'><thead className='bg-gray-100'>{table.getHeaderGroups().map(hg=>(<tr key={hg.id}>{hg.headers.map(h=>(<th key={h.id} className='text-left p-2 border-b cursor-pointer' onClick={h.column.getToggleSortingHandler()}>{flexRender(h.column.columnDef.header,h.getContext())}</th>))}</tr>))}</thead><tbody>{table.getRowModel().rows.map(r=>(<tr key={r.id} className='hover:bg-gray-50'>{r.getVisibleCells().map(c=>(<td key={c.id} className='p-2 border-b'>{flexRender(c.column.columnDef.cell,c.getContext())}</td>))}</tr>))}</tbody></table></div>{selected&&(<div className='space-y-3'><div className='flex items-center justify-between'><h3 className='font-semibold'>Mappings for {selected.code} â€” {selected.name}</h3><button className='border rounded px-3 py-2' onClick={addMapping}>Add mapping</button></div><div className='border rounded overflow-hidden'><table className='w-full text-sm'><thead className='bg-gray-100'><tr><th className='text-left p-2 border-b'>Concept</th><th className='text-left p-2 border-b'>Correlation</th><th className='text-left p-2 border-b'>Status</th><th className='text-left p-2 border-b'>Notes</th><th className='text-left p-2 border-b'>Actions</th></tr></thead><tbody>{mappings.map(m=>(<tr key={m._id} className='align-top'><td className='p-2 border-b min-w-[320px]'><ConceptPicker value={{id:m.snomedId,term:m.snomedTerm}} onChange={v=>setMappings(ms=>ms.map(x=>x._id===m._id?{...x,snomedId:v.id,snomedTerm:v.term}:x))}/><div className='text-xs text-gray-500 mt-1'>{m.snomedId?`${m.snomedId}${m.snomedTerm?` | ${m.snomedTerm}`:''}`:''}</div></td><td className='p-2 border-b'><select className='border rounded px-2 py-1 w-full' value={m.correlation||'exact'} onChange={e=>setMappings(ms=>ms.map(x=>x._id===m._id?{...x,correlation:e.target.value as any}:x))}><option value='exact'>Exact</option><option value='narrow'>Narrow</option><option value='broad'>Broad</option><option value='partial'>Partial</option></select></td><td className='p-2 border-b'><select className='border rounded px-2 py-1 w-full' value={m.status||'draft'} onChange={e=>setMappings(ms=>ms.map(x=>x._id===m._id?{...x,status:e.target.value as any}:x))}><option value='draft'>Draft</option><option value='proposed'>Proposed</option><option value='approved'>Approved</option><option value='rejected'>Rejected</option></select></td><td className='p-2 border-b'><textarea className='border rounded px-2 py-1 w-full min-h-[60px]' value={m.notes||''} onChange={e=>setMappings(ms=>ms.map(x=>x._id===m._id?{...x,notes:e.target.value}:x))}/></td><td className='p-2 border-b whitespace-nowrap'><div className='flex gap-2'><button className='border rounded px-2 py-1' onClick={()=>saveMapping(m)}>Save</button><button className='border rounded px-2 py-1' onClick={()=>{ if(m.snomedId){ setModalConceptId(m.snomedId); setModalOpen(true);} }}>Model</button><button className='border rounded px-2 py-1' onClick={()=>deleteMapping(m)}>Delete</button></div></td></tr>))}</tbody></table></div></div>)}<ConceptModal conceptId={modalConceptId} open={modalOpen} onClose={()=>setModalOpen(false)} /></div>); }
