"use client";
import { useEffect, useState } from 'react'; import AxiomTree from '@/components/AxiomTree';
 type DescItem={id:string;term:string;fsn?:string;active?:boolean;lang?:string}; type Details={ok:boolean;id:string;term:string;fsn:string;active:boolean|null;inferred:any[];stated:any[];raw?:any};
function SearchTab({onPick}:{onPick:(id:string)=>void}){ const [q,setQ]=useState(''); const [active,setActive]=useState(true); const [items,setItems]=useState<DescItem[]>([]); useEffect(()=>{ const t=setTimeout(async()=>{ if(q.length<3){setItems([]);return;} const r=await fetch(`/api/snomed/descsearch?term=${encodeURIComponent(q)}&active=${active?'true':'false'}`,{cache:'no-store'}); const j=await r.json(); setItems(j.items||[]); },300); return()=>clearTimeout(t); },[q,active]); return(<div className='p-2 space-y-2'><div className='flex gap-2'><input className='border rounded px-3 py-2 flex-1' placeholder='Type at least 3 characters…' value={q} onChange={e=>setQ(e.target.value)}/><label className='text-sm flex items-center gap-2 border rounded px-2'><input type='checkbox' checked={active} onChange={e=>setActive(e.target.checked)}/> Active only</label></div><div className='border rounded max-h-[70vh] overflow-auto'>{items.map(it=>(<button key={it.id+it.term} className='w-full text-left px-3 py-2 border-b hover:bg-gray-50' onClick={()=>onPick(it.id)}><div className='text-sm'>{it.term}</div><div className='text-xs text-gray-500'>{it.id}{it.fsn?` | ${it.fsn}`:''}</div></button>))}{items.length===0&&<div className='p-3 text-sm text-gray-500'>No results</div>}</div></div>); }
function TaxonomyTab({focus,setFocus}:{focus?:string;setFocus:(id:string)=>void}){ const [data,setData]=useState<any>(null); useEffect(()=>{ if(!focus) return; fetch(`/api/snomed/taxonomy?id=${encodeURIComponent(focus)}`,{cache:'no-store'}).then(r=>r.json()).then(setData); },[focus]); return(<div className='p-2'><div className='text-xs uppercase text-gray-500 mb-1'>Parents</div><ul className='space-y-1'>{(data?.parents||[]).map((p:any)=>(<li key={p.conceptId}><div onDoubleClick={()=>setFocus(p.conceptId)} className='cursor-zoom-in hover:underline'>{p.conceptId} | {p.fsn?.term||p.pt?.term||''}<ul className='ml-5'><li className='text-sm font-medium'>{data?.focus?.conceptId} | {data?.focus?.fsn?.term||data?.focus?.pt?.term||''}</li></ul></div></li>))}</ul><div className='text-xs uppercase text-gray-500 mt-4 mb-1'>Children</div><ul className='space-y-1'>{(data?.children||[]).map((c:any)=>(<li key={c.conceptId}><div onDoubleClick={()=>setFocus(c.conceptId)} className='cursor-zoom-in hover:underline'>{c.conceptId} | {c.fsn?.term||c.pt?.term||''}</div></li>))}</ul></div>); }
export default function Browser(){ const [focus,setFocus]=useState<string|undefined>('372755006'); const [details,setDetails]=useState<Details|null>(null); const [leftTab,setLeftTab]=useState<'taxonomy'|'search'>('taxonomy'); const [rightTab,setRightTab]=useState<'details'|'diagram'|'tree'>('details'); useEffect(()=>{ if(!focus) return; setDetails(null); fetch(`/api/snomed/details?id=${encodeURIComponent(focus)}`,{cache:'no-store'}).then(r=>r.json()).then(setDetails); },[focus]); return(<div className='h-screen grid' style={{gridTemplateColumns:'420px 1fr'}}><div className='border-r bg-gray-50 flex flex-col'><div className='p-2 border-b flex gap-2'><button className={`border rounded px-3 py-1 ${leftTab==='taxonomy'?'bg-white':''}`} onClick={()=>setLeftTab('taxonomy')}>Taxonomy</button><button className={`border rounded px-3 py-1 ${leftTab==='search'?'bg-white':''}`} onClick={()=>setLeftTab('search')}>Search</button></div><div className='flex-1 overflow-auto'>{leftTab==='taxonomy'?<TaxonomyTab focus={focus} setFocus={setFocus}/>:<SearchTab onPick={(id)=>{setFocus(id); setLeftTab('taxonomy');}}/>}</div></div><div className='flex flex-col'><div className='p-2 border-b flex items-center justify-between bg-white'><div className='text-sm text-gray-600'>Focus: {details?.id} | {details?.fsn}</div><div className='flex gap-2'><button className={`border rounded px-3 py-1 ${rightTab==='details'?'bg-gray-100':''}`} onClick={()=>setRightTab('details')}>Concept details</button><button className={`border rounded px-3 py-1 ${rightTab==='diagram'?'bg-gray-100':''}`} onClick={()=>setRightTab('diagram')}>Diagram (SVG)</button><button className={`border rounded px-3 py-1 ${rightTab==='tree'?'bg-gray-100':''}`} onClick={()=>setRightTab('tree')}>Inferred tree</button></div></div><div className='flex-1 overflow-auto p-3'>{!details&&<div className='text-sm text-gray-500'>Loading…</div>}{details&&(<>{rightTab==='details'&&(<div className='space-y-2'><div className='text-lg font-semibold'>{details.term}</div><div className='text-sm text-gray-600'>{details.id} | {details.fsn}</div>{typeof details.active==='boolean'&&(<span className={`inline-block text-xs px-2 py-[2px] rounded ${details.active?'bg-green-100 text-green-800':'bg-red-100 text-red-800'}`}>{details.active?'Active':'Inactive'}</span>)}</div>)}{rightTab==='diagram'&&(<object type='image/svg+xml' data={`/api/snomed/diagram?id=${encodeURIComponent(details.id)}`} className='w-full h-[80vh] border rounded bg-white'/>) }{rightTab==='tree'&&(<AxiomTree title='Inferred relationships' rels={details.inferred||[]}/>)} </>)}</div></div></div>); }
