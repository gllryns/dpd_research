import { NextRequest, NextResponse } from 'next/server'; import { getDb } from '@/lib/db'; import { requireAuth } from '@/lib/session';
export async function GET(req:NextRequest){ await requireAuth(req); const sp=new URL(req.url).searchParams; const q=(sp.get('q')||'').trim(); const status=(sp.get('status')||'').trim(); const page=Math.max(1,parseInt(sp.get('page')||'1')); const pageSize=Math.min(200,parseInt(sp.get('pageSize')||'20')); const sortBy=sp.get('sortBy')||'code'; const sortDir=(sp.get('sortDir')||'asc').toLowerCase()==='desc'?-1:1; const skip=(page-1)*pageSize; const db=await getDb(); const coll=db.collection('ingredients'); const filter:any={}; if(q) filter.$or=[{code:{$regex:q,$options:'i'}},{name:{$regex:q,$options:'i'}}]; if(status) filter.status=status; const total=await coll.countDocuments(filter); const items=await coll.find(filter).sort({[sortBy]:sortDir}).skip(skip).limit(pageSize).toArray(); return NextResponse.json({items,total,page,pageSize}); }
export async function POST(req:NextRequest){ await requireAuth(req); const body=await req.json(); const db=await getDb(); if(!body.code||!body.name) return NextResponse.json({message:'code and name required'},{status:400}); const exists=await db.collection('ingredients').findOne({code:body.code}); if(exists) return NextResponse.json({message:'code exists'},{status:409}); const doc={code:String(body.code),name:String(body.name),status:body.status||'active',createdAt:new Date()}; await db.collection('ingredients').insertOne(doc); return NextResponse.json(doc,{status:201}); }
